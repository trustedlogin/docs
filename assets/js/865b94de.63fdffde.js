"use strict";(self.webpackChunktrustedlogin_docs=self.webpackChunktrustedlogin_docs||[]).push([[44],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5394:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var a=n(3117),r=(n(7294),n(3905));const i={},o="Elasticsearch",s={unversionedId:"SaaS/elasticsearch",id:"SaaS/elasticsearch",title:"Elasticsearch",description:"Elasticsearch is used to log access and usage data, as well as to display that data in the UI.",source:"@site/docs/SaaS/elasticsearch.md",sourceDirName:"SaaS",slug:"/SaaS/elasticsearch",permalink:"/SaaS/elasticsearch",draft:!1,editUrl:"https://github.com/trustedlogin/docs/edit/main/docs/docs/SaaS/elasticsearch.md",tags:[],version:"current",frontMatter:{},sidebar:"SaaS",previous:{title:"Data Storage",permalink:"/SaaS/data-storage"},next:{title:"Subcontractors",permalink:"/SaaS/subcontractors"}},c={},l=[{value:"Servers",id:"servers",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Production",id:"production",level:3},{value:"Clients And Services",id:"clients-and-services",level:2},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Event Types",id:"event-types",level:3}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"elasticsearch"},"Elasticsearch"),(0,r.kt)("p",null,"Elasticsearch is used to log access and usage data, as well as to display that data in the UI."),(0,r.kt)("h2",{id:"servers"},"Servers"),(0,r.kt)("p",null,"For production, set environment variable for ",(0,r.kt)("inlineCode",{parentName:"p"},"ELASTIC_SEARCH_HOST")," to URL for Elasticsearch instance, with basic auth credentials in URL. The default is the docker-compose URL."),(0,r.kt)("h3",{id:"local-development"},"Local Development"),(0,r.kt)("p",null,"Elasticsearch is included in the local docker-compose environment. Inside of Docker use http://elasticsearch:9200 to connect."),(0,r.kt)("h3",{id:"production"},"Production"),(0,r.kt)("p",null,"The production Elasticsearch is at ",(0,r.kt)("a",{parentName:"p",href:"https://elasticsearch.trustedlogin.com"},"https://elasticsearch.trustedlogin.com")),(0,r.kt)("h2",{id:"clients-and-services"},"Clients And Services"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"App\\Http\\Clients\\ElasticSearch")," is an HTTP client for Elasticsearch, which is decopupled from TrustedLogin's business logic. ",(0,r.kt)("inlineCode",{parentName:"p"},"App\\Services\\ElasticSearchTeamData")," uses that client. It provides methods for writing and searching team data, as well as methods for creating and updating team indexes."),(0,r.kt)("h3",{id:"dependency-injection"},"Dependency Injection"),(0,r.kt)("p",null,"All of this is setup in ",(0,r.kt)("inlineCode",{parentName:"p"},"App\\Providers\\ElasticSearchProvider"),", so you can type hint the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"App\\Contracts\\ElasticSearchTeamData")," to inject the server."),(0,r.kt)("p",null,"In most Laravel controller, you can bind that service to the constructor of"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Contracts\\ElasticSearchTeamData;\n\n\nclass LoginReportController extends Controller\n{\n    protected ElasticSearchTeamData $esClient;\n    public function __construct( ElasticSearchTeamData $esClient)\n    {\n        $this->esClient = $esClient;\n    }\n\n    public function endpoint(Team $team){\n        //Add an array of data to the log.\n        //Must use an \"eventType\" field.\n        $this->esClient->writeDataForTeam(\n            $team,\n            [\n                //always set eventType!\n                'eventType' => ElasticSearchEventTypes::SOMETHING_YOU_ADDED,\n                //add other stuffs\n                'sandwich' => 'special',\n                'drinks' => ['seltzer',\n                    ['coke' => 'diet' ]\n                ],\n            ]\n        );\n\n    }\n\n    public function endpointThatLogsLogin(Team $team, Site $site){\n\n\n        //Log a login to a site\n        $this->esClient->logLogin(\n            $team,\n            $site,\n            now()//optional, carbon instance, default is now()\n        );\n    }\n}\n")),(0,r.kt)("h3",{id:"event-types"},"Event Types"),(0,r.kt)("p",null,"The search queries that the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticSearchTeamData"),' service makes assume a meaningful "eventType" column is in the data for the index. So, when logging data for a team, you need to add an eventType.'),(0,r.kt)("p",null,"Event types must be registered in ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticSearchEventTypes"),". Before adding a new event type, add a constant to that class with the name. Then add that constant to the array in the ",(0,r.kt)("inlineCode",{parentName:"p"},"getTypes()")," method."))}u.isMDXComponent=!0}}]);