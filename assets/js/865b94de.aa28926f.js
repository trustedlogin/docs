"use strict";(self.webpackChunktrustedlogin_docs=self.webpackChunktrustedlogin_docs||[]).push([[862],{4260:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});var s=n(4848),a=n(8453);const c={},i="Elasticsearch",r={id:"SaaS/elasticsearch",title:"Elasticsearch",description:"Elasticsearch is used to log access and usage data, as well as to display that data in the UI.",source:"@site/docs/SaaS/elasticsearch.md",sourceDirName:"SaaS",slug:"/SaaS/elasticsearch",permalink:"/SaaS/elasticsearch",draft:!1,unlisted:!1,editUrl:"https://github.com/trustedlogin/docs/edit/main/docs/SaaS/elasticsearch.md",tags:[],version:"current",frontMatter:{},sidebar:"SaaS",previous:{title:"Data Storage",permalink:"/SaaS/data-storage"},next:{title:"Subcontractors",permalink:"/SaaS/subcontractors"}},o={},l=[{value:"Servers",id:"servers",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Production",id:"production",level:3},{value:"Clients And Services",id:"clients-and-services",level:2},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Event Types",id:"event-types",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"elasticsearch",children:"Elasticsearch"}),"\n",(0,s.jsx)(t.p,{children:"Elasticsearch is used to log access and usage data, as well as to display that data in the UI."}),"\n",(0,s.jsx)(t.h2,{id:"servers",children:"Servers"}),"\n",(0,s.jsxs)(t.p,{children:["For production, set environment variable for ",(0,s.jsx)(t.code,{children:"ELASTIC_SEARCH_HOST"})," to URL for Elasticsearch instance, with basic auth credentials in URL. The default is the docker-compose URL."]}),"\n",(0,s.jsx)(t.h3,{id:"local-development",children:"Local Development"}),"\n",(0,s.jsxs)(t.p,{children:["Elasticsearch is included in the local docker-compose environment. Inside of Docker use ",(0,s.jsx)(t.a,{href:"http://elasticsearch:9200",children:"http://elasticsearch:9200"})," to connect."]}),"\n",(0,s.jsx)(t.h3,{id:"production",children:"Production"}),"\n",(0,s.jsxs)(t.p,{children:["The production Elasticsearch is at ",(0,s.jsx)(t.a,{href:"https://elasticsearch.trustedlogin.com",children:"https://elasticsearch.trustedlogin.com"})]}),"\n",(0,s.jsx)(t.h2,{id:"clients-and-services",children:"Clients And Services"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"App\\Http\\Clients\\ElasticSearch"})," is an HTTP client for Elasticsearch, which is decopupled from TrustedLogin's business logic. ",(0,s.jsx)(t.code,{children:"App\\Services\\ElasticSearchTeamData"})," uses that client. It provides methods for writing and searching team data, as well as methods for creating and updating team indexes."]}),"\n",(0,s.jsx)(t.h3,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,s.jsxs)(t.p,{children:["All of this is setup in ",(0,s.jsx)(t.code,{children:"App\\Providers\\ElasticSearchProvider"}),", so you can type hint the interface ",(0,s.jsx)(t.code,{children:"App\\Contracts\\ElasticSearchTeamData"})," to inject the server."]}),"\n",(0,s.jsx)(t.p,{children:"In most Laravel controller, you can bind that service to the constructor of"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Contracts\\ElasticSearchTeamData;\n\n\nclass LoginReportController extends Controller\n{\n    protected ElasticSearchTeamData $esClient;\n    public function __construct( ElasticSearchTeamData $esClient)\n    {\n        $this->esClient = $esClient;\n    }\n\n    public function endpoint(Team $team){\n        //Add an array of data to the log.\n        //Must use an \"eventType\" field.\n        $this->esClient->writeDataForTeam(\n            $team,\n            [\n                //always set eventType!\n                'eventType' => ElasticSearchEventTypes::SOMETHING_YOU_ADDED,\n                //add other stuffs\n                'sandwich' => 'special',\n                'drinks' => ['seltzer',\n                    ['coke' => 'diet' ]\n                ],\n            ]\n        );\n\n    }\n\n    public function endpointThatLogsLogin(Team $team, Site $site){\n\n\n        //Log a login to a site\n        $this->esClient->logLogin(\n            $team,\n            $site,\n            now()//optional, carbon instance, default is now()\n        );\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"event-types",children:"Event Types"}),"\n",(0,s.jsxs)(t.p,{children:["The search queries that the ",(0,s.jsx)(t.code,{children:"ElasticSearchTeamData"}),' service makes assume a meaningful "eventType" column is in the data for the index. So, when logging data for a team, you need to add an eventType.']}),"\n",(0,s.jsxs)(t.p,{children:["Event types must be registered in ",(0,s.jsx)(t.code,{children:"ElasticSearchEventTypes"}),". Before adding a new event type, add a constant to that class with the name. Then add that constant to the array in the ",(0,s.jsx)(t.code,{children:"getTypes()"})," method."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(6540);const a={},c=s.createContext(a);function i(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);