"use strict";(self.webpackChunktrustedlogin_docs=self.webpackChunktrustedlogin_docs||[]).push([[309],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),h=a,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8687:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Development - CI/CD"},s="Continuous Integration and Continuous Deployment (CI/CD)",u={unversionedId:"SaaS/CI-CD",id:"SaaS/CI-CD",isDocsHomePage:!1,title:"Development - CI/CD",description:"Each pull request will trigger a build in GitHub Actions for testing and a QA site on Platform.sh.",source:"@site/docs/SaaS/CI-CD.md",sourceDirName:"SaaS",slug:"/SaaS/CI-CD",permalink:"/docs/SaaS/CI-CD",editUrl:"https://github.com/trustedlogin/docs/edit/main/website/docs/SaaS/CI-CD.md",tags:[],version:"current",frontMatter:{title:"Development - CI/CD"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Laravel Things we Are Using And Why",permalink:"/docs/SaaS/Laravel"}},p=[{value:"What We Are Using",id:"what-we-are-using",children:[],level:2},{value:"Platform.sh + GitHub",id:"platformsh--github",children:[{value:"Deploying To Master",id:"deploying-to-master",children:[],level:3},{value:"Troubleshooting platform.sh deploy issues.",id:"troubleshooting-platformsh-deploy-issues",children:[],level:3}],level:2},{value:"GitHub Actions",id:"github-actions",children:[],level:2}],c={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"continuous-integration-and-continuous-deployment-cicd"},"Continuous Integration and Continuous Deployment (CI/CD)"),(0,o.kt)("p",null,"Each pull request will trigger a build in GitHub Actions for testing and a QA site on Platform.sh."),(0,o.kt)("h2",{id:"what-we-are-using"},"What We Are Using"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://platform.sh"},"Platform.sh"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Hosts the app"),(0,o.kt)("li",{parentName:"ul"},"Provides a QA environment for each branch."))),(0,o.kt)("li",{parentName:"ul"},"Github",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Hosts the code and issue tracker. "))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://chipperci.com/"},"ChipperCI"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Automated testing. "))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://phpunit.de/"},"phpunit"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Used for php tests, including browser tests.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://laravel.com/docs/5.8/testing"},"Laravel Testing Docs")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://laravel.com/docs/5.8/dusk"},"Browser Testing Docs"))))))),(0,o.kt)("h2",{id:"platformsh--github"},"Platform.sh + GitHub"),(0,o.kt)("p",null," We are using the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.platform.sh/administration/integrations/github.html"},"platform GitHub intergration"),". When you create a pull request, a new QA environment is created. You can access its URL from the Platform.sh UI or clicking the link in the PR's status check sections."),(0,o.kt)("h3",{id:"deploying-to-master"},"Deploying To Master"),(0,o.kt)("p",null,"To deploy to master, merge any open PR to master. Platform handles the rest."),(0,o.kt)("h3",{id:"troubleshooting-platformsh-deploy-issues"},"Troubleshooting platform.sh deploy issues."),(0,o.kt)("p",null,"If a pull request does NOT create a new build in Platform, there are a few reasons to look at first:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Are there more environments than the plan supports? There can only be 3 QA environments at once."),(0,o.kt)("li",{parentName:"ol"},"Application resources exceed the plan. You might fix this by ",(0,o.kt)("a",{parentName:"li",href:"https://docs.platform.sh/configuration/app/size.html"},"adjusting service size")),(0,o.kt)("li",{parentName:"ol"},"There is a syntax error in ",(0,o.kt)("a",{parentName:"li",href:"https://docs.platform.sh/configuration/"},"platform.yml"))),(0,o.kt)("h2",{id:"github-actions"},"GitHub Actions"),(0,o.kt)("p",null,"Whenever you push to a pull request branch:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"GitHub Actions will run tests using phpunit. These include unit/integration tests as well as browser tests."),(0,o.kt)("li",{parentName:"ol"},"Platform will deploy an environment that you can use for manual QA and testing.")))}m.isMDXComponent=!0}}]);